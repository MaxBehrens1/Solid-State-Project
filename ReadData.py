import numpy as np
from itertools import groupby
import os
from scipy.constants import k, m_e

filepath = os.path.dirname(__file__)
filename = "C:/Users/User/OneDrive - The University of Manchester/Year 3/Estado SÃ³lido/sss/Solid-State-Project/Data/mean_sq_dev_vel_for_t_5e-1ps.txt"
def ReadData(filename):
    """Reads data from txt file generated by sss

    Args:
        filename (_type_): _description_

    Returns:
        times - array of time vals
        3 arrays, depending on model
    """
    array_list = []
    with open(filename) as f_data:    
        for k, g in groupby(f_data, lambda x: x.startswith('&')):
            if not k:
                array_list.append(np.array([[float(x) for x in d.split()] for d in g if len(d.strip())]))
        array_list = np.array(array_list[:3])
    return array_list[0,:,0], array_list[0,:,1], array_list[1,:,1], array_list[2,:,1]

def DrudeTemp(x_data, y_data):
    x_avg = np.mean(x_data)
    y_avg = np.mean(y_data)

    T = (x_avg+y_avg)*(10**8)*(m_e)/(2*k)
    return print(f"T = {T:.4f}K")

data = ReadData(filename)
sim_type = "drude"

times = data[0]

if sim_type=='sommer':
    print("Data from Sommerfeld Model.")
    print("Config:\n",
          "times: array of time in ps\n",
          "xdata: array of x_data\n",
          "ydata: array of y_data\n",
          "Edata: array of energy excess data\n")
    x_data = data[1]
    y_data = data[2]
    E_excess = data[3]

if sim_type=='drude':
    print("Data from Drude Model.")
    print("Config:\n",
          "times: array of time in ps\n",
          "xdata: array of x_data\n",
          "E_field: array of E-field values\n",
          "y_data: array of y_data")
    print("note that velocities for the Drude data are in units of 10^8 m/s\n")
    x_data = data[1]
    E_field = data[2]
    y_data = data[3]

averages = [np.mean(data[i]) for i in range(4)]
for i, avg in enumerate(averages):
    print(f"Average for data[{i}] is {avg:.4f}")

DrudeTemp(x_data, y_data)


    